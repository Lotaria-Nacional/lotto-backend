generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  first_name         String
  last_name          String
  email              String              @unique
  password           String
  role               UserRole            @default(user)
  zone_id            String?
  area_id            String?
  membership         Membership[]
  created_at         DateTime            @default(now())
  ResetPasswordToken ResetPasswordToken?

  @@map("users")
}

model Agent {
  id               String      @id @default(uuid())
  id_reference     Int?        @unique
  first_name       String
  last_name        String
  genre            Genre
  phone_number     String?
  afrimoney_number String?
  agent_type       AgentType
  bi_number        String?
  status           AgentStatus @default(scheduled)

  training_date DateTime
  approved_at   DateTime?

  created_at DateTime  @default(now())
  terminal   Terminal?
  pos        Pos?

  @@map("agents")
}

model Terminal {
  id         String          @id @default(uuid())
  serial     String          @unique
  device_id  String?
  note       String?
  status     TerminalStatus? @default(stock)
  created_at DateTime        @default(now())
  arrived_at DateTime
  leaved_at  DateTime?

  agent_id_reference Int?     @unique
  agent              Agent?   @relation(fields: [agent_id_reference], references: [id_reference])
  sim_card           SimCard?

  @@map("terminals")
}

model SimCard {
  id String @id @default(uuid())

  number     String        @unique
  pin        String?
  puk        String?
  status     SimCardStatus @default(stock)
  arrived_at DateTime      @default(now())
  created_at DateTime      @default(now())

  terminal_id String?   @unique
  terminal    Terminal? @relation(fields: [terminal_id], references: [id])

  @@map("sim_cards")
}

model Pos {
  id          String    @id @default(uuid())
  coordinates String
  latitude    Float
  longitude   Float
  status      PosStatus @default(pending)
  created_at  DateTime  @default(now())

  /// Administração pelo nome
  admin_name String
  admin      Administration @relation(fields: [admin_name], references: [name])

  licence_reference String?
  licence           Licence? @relation(fields: [licence_reference], references: [reference])

  /// Agente segue igual
  agent_id_reference Int?   @unique
  agent              Agent? @relation(fields: [agent_id_reference], references: [id_reference])

  /// Relacionamento pela Área (nome)
  area_name String?
  area      Area?   @relation(fields: [area_name], references: [name])

  /// Relacionamento pela Zona (number)
  zone_number Int?
  zone        Zone? @relation(fields: [zone_number], references: [number])

  /// Cidade pelo nome
  city_name String
  city      City   @relation(fields: [city_name], references: [name])

  /// Província pelo nome
  province_name String
  province      Province @relation(fields: [province_name], references: [name])

  /// Tipo pelo nome
  type_name String?
  type      Type?   @relation(fields: [type_name], references: [name])

  /// Subtipo pelo nome
  subtype_name String?
  subtype      Subtype? @relation(fields: [subtype_name], references: [name])

  @@map("pos")
}

model Licence {
  id          String        @id @default(uuid())
  number      String
  description String
  reference   String        @unique
  limit       Int           @default(1)
  status      LicenceStatus @default(free)
  emitted_at  DateTime
  expires_at  DateTime
  created_at  DateTime      @default(now())

  file        String?
  coordinates String
  latitude    Float
  longitude   Float

  admin_name String?
  admin      Administration? @relation(fields: [admin_name], references: [name])

  pos Pos[]

  @@map("licences")
}

model Administration {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  pos      Pos[]
  licences Licence[]

  cities City[] // Uma administração tem várias cidades
}

model Province {
  name   String @unique
  id     Int    @id @default(autoincrement())
  cities City[]
  pos    Pos[]

  @@map("provinces")
}

model City {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  province    Province @relation(fields: [province_id], references: [id])
  province_id Int

  zone    Zone? @relation(fields: [zone_id], references: [id])
  zone_id Int? // cada cidade só tem 1 zona

  area    Area? @relation(fields: [area_id], references: [id])
  area_id Int?

  pos Pos[]

  administration    Administration? @relation(fields: [administration_id], references: [id])
  administration_id Int?
}

model Zone {
  id     Int @id @default(autoincrement())
  number Int @unique

  cities City[] // uma zona pode ter várias cidades
  pos    Pos[]
}

model Area {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
  pos    Pos[]
}

model Type {
  name     String    @unique
  id       Int       @id @default(autoincrement())
  pos      Pos[]
  subtypes Subtype[]

  @@map("types")
}

model Subtype {
  name    String @unique
  id      Int    @id @default(autoincrement())
  type_id Int
  pos     Pos[]
  type    Type   @relation(fields: [type_id], references: [id])

  @@map("subtypes")
}

model AuditLog {
  id         String   @id @default(uuid())
  entity     Modules
  user_name  String
  user_email String
  action     Actions
  changes    Json
  created_at DateTime @default(now())

  @@map("audit_logs")
}

model IdReference {
  id      Int       @id @default(autoincrement())
  counter Int       @default(autoincrement())
  type    AgentType @unique

  @@map("id_references")
}

model ResetPasswordToken {
  id         String   @id @default(uuid())
  token      String   @unique
  expires_at DateTime
  user_id    String   @unique
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Group {
  id          String            @id @default(uuid())
  name        String
  description String?
  memberships Membership[]
  permissions GroupPermission[]
  created_at  DateTime          @default(now())
  updated_at  DateTime          @default(now())

  @@map("groups")
}

model Membership {
  user_id  String
  group_id String

  group Group @relation(fields: [group_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@id([user_id, group_id])
  @@map("memberships")
}

model GroupPermission {
  id       String    @id @default(uuid())
  group_id String
  module   Modules
  action   Actions[]

  group Group @relation(fields: [group_id], references: [id])

  @@unique([group_id, module])
  @@map("group_permissions")
}

enum AgentType {
  lotaria_nacional
  revendedor
}

enum Genre {
  male
  female
}

enum AgentStatus {
  active
  denied
  scheduled
  approved
  ready
  discontinued
}

enum TerminalStatus {
  ready
  on_field
  training
  stock
  broken
  maintenance
  discontinued
}

enum LicenceStatus {
  free
  used
}

enum PosStatus {
  pending
  approved
  active
  denied
  discontinued
}

enum SimCardStatus {
  active
  stock
}

enum UserRole {
  user
  dev
  admin
  area_manager
  supervisor
}

enum Modules {
  POS
  USER
  AGENT
  LICENCE
  TERMINAL
  SIM_CARD
  MAINTAINANCE
  GROUP
  INVENTORY
  TRAINING
  all
}

enum Actions {
  READ
  CREATE
  UPDATE
  DELETE
  EXPORT
  IMPORT
  APPROVE
  DENY
  REPROVE
  BLOCK
  RESET
  ASSOCIATE
  manage
}
